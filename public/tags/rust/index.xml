<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Nothing to see here</title>
    <link>http://localhost:1313/tags/rust/</link>
    <description>Recent content in Rust on Nothing to see here</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© [Jim Greer](https://jbgreer.github.io).</copyright>
    <lastBuildDate>Wed, 19 Feb 2025 16:56:55 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scheme RS</title>
      <link>http://localhost:1313/post/scheme-rs/</link>
      <pubDate>Wed, 19 Feb 2025 16:56:55 -0600</pubDate>
      <guid>http://localhost:1313/post/scheme-rs/</guid>
      <description>&lt;h2 id=&#34;scheme-rs-a-scheme-implementation-in-async-rusthttpsmaplantcom2025-02-17-why-im-writing-a-scheme-implementation-in-2025-the-answer-is-async-rusthtml&#34;&gt;(Scheme-RS: a scheme implementation in (async) Rust)[https://maplant.com/2025-02-17-Why-I&amp;rsquo;m-Writing-a-Scheme-Implementation-in-2025-(The-Answer-is-Async-Rust).html]&lt;/h2&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;Scheme-rs is a work-in-progress implementation of R6RS that allows for seamless interoperability with async Rust. All you have to do is add scheme-rs to your Cargo.toml, define some bridge functions with the provided proc macros, and scheme-rs will provide you with a way to dynamically glue your code together, including allowing you to provide a REPL for debugging, inspecting, or even orchestrating your system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust Embedded Scheme</title>
      <link>http://localhost:1313/post/rust-embedded-scheme/</link>
      <pubDate>Sat, 01 Feb 2025 17:36:03 -0600</pubDate>
      <guid>http://localhost:1313/post/rust-embedded-scheme/</guid>
      <description>&lt;h2 id=&#34;steel-embeddable-scheme-interpreter-written-in-rust&#34;&gt;&lt;a href=&#34;https://github.com/mattwparas/steel&#34;&gt;Steel&lt;/a&gt;: embeddable scheme interpreter written in Rust&lt;/h2&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;Steel is an embeddable scheme interpreter, with a standalone cli included as well. Inspired largely by Racket, the language seeks to be ergonomic scheme variant helpful for embedding in applications, or to be used on its own with high performance functions implemented in Rust. The language implementation itself contains a fairly powerful macro system based on the syntax-rules style and a bytecode virtual machine. At the moment, it is not explicitly compliant with any individual scheme specification.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
