<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Language on Nothing to see here</title>
    <link>http://localhost:1313/tags/programming-language/</link>
    <description>Recent content in Programming Language on Nothing to see here</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© [Jim Greer](https://jbgreer.github.io).</copyright>
    <lastBuildDate>Wed, 19 Feb 2025 16:56:55 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/programming-language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scheme RS</title>
      <link>http://localhost:1313/post/scheme-rs/</link>
      <pubDate>Wed, 19 Feb 2025 16:56:55 -0600</pubDate>
      <guid>http://localhost:1313/post/scheme-rs/</guid>
      <description>&lt;h2 id=&#34;scheme-rs-a-scheme-implementation-in-async-rusthttpsmaplantcom2025-02-17-why-im-writing-a-scheme-implementation-in-2025-the-answer-is-async-rusthtml&#34;&gt;(Scheme-RS: a scheme implementation in (async) Rust)[https://maplant.com/2025-02-17-Why-I&amp;rsquo;m-Writing-a-Scheme-Implementation-in-2025-(The-Answer-is-Async-Rust).html]&lt;/h2&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;Scheme-rs is a work-in-progress implementation of R6RS that allows for seamless interoperability with async Rust. All you have to do is add scheme-rs to your Cargo.toml, define some bridge functions with the provided proc macros, and scheme-rs will provide you with a way to dynamically glue your code together, including allowing you to provide a REPL for debugging, inspecting, or even orchestrating your system.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
