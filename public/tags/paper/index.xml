<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paper on Nothing to see here</title>
    <link>http://localhost:1313/tags/paper/</link>
    <description>Recent content in Paper on Nothing to see here</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© [Jim Greer](https://jbgreer.github.io).</copyright>
    <lastBuildDate>Sat, 04 Jan 2025 20:53:06 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/paper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MiniKanren</title>
      <link>http://localhost:1313/post/minikanren/</link>
      <pubDate>Sat, 04 Jan 2025 20:53:06 -0600</pubDate>
      <guid>http://localhost:1313/post/minikanren/</guid>
      <description>&lt;h2 id=&#34;relational-programming-in-minikanren&#34;&gt;&lt;a href=&#34;https://github.com/webyrd/dissertation-single-spaced/blob/master/thesis.pdf&#34;&gt;Relational Programming in miniKanren&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;abstract&#34;&gt;Abstract&lt;/h3&gt;&#xA;&lt;p&gt;The promise of logic programming is that programs can be written relationally,&#xA;without distinguishing between input and output arguments. Relational programs&#xA;are remarkably flexible—for example, a relational type-inferencer also performs type&#xA;checking and type inhabitation, while a relational theorem prover generates theo-&#xA;rems as well as proofs and can even be used as a simple proof assistant.&#xA;Unfortunately, writing relational programs is difficult, and requires many inter-&#xA;esting and unusual tools and techniques. For example, a relational interpreter for&#xA;a subset of Scheme might use nominal unification to support variable binding and&#xA;scope, Constraint Logic Programming over Finite Domains (CLP(FD)) to imple-&#xA;ment relational arithmetic, and tabling to improve termination behavior.&#xA;In this dissertation I present miniKanren, a family of languages specifically de-&#xA;signed for relational programming, and which supports a variety of relational idioms&#xA;and techniques. I show how miniKanren can be used to write interesting relational&#xA;programs, including an extremely flexible lean tableau theorem prover and a novel&#xA;constraint-free binary arithmetic system with strong termination guarantees. I also&#xA;present interesting and practical techniques used to implement miniKanren, includ-&#xA;ing a nominal unifier that uses triangular rather than idempotent substitutions and&#xA;a novel “walk”-based algorithm for variable lookup in triangular substitutions.&#xA;The result of this research is a family of languages that supports a variety of&#xA;relational idioms and techniques, making it feasible and useful to write interesting&#xA;programs as relations.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
